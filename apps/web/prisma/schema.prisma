// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  spotifyId String?  @unique
  appleId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  scenes Scene[]
  clips Clip[]
  tracks Track[]
}

model Track {
  id         String   @id @default(cuid())
  source     TrackSource
  sourceId   String
  isrc       String?
  title      String
  artist     String
  durationMs Int
  album      String?
  artworkUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  analysis Analysis?
  clips    Clip[]
  userId   String?
  user     User?    @relation(fields: [userId], references: [id])

  @@unique([source, sourceId])
}

enum TrackSource {
  spotify
  youtube
  apple
  local
}

model Analysis {
  trackId   String @id
  track     Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  // Audio features
  tempo     Float?
  key       Int?
  energy    Float?
  loudness  Float?
  valence   Float?
  danceability Float?
  instrumentalness Float?
  
  // Timing data
  beats     Json? // Array of { t: number, isDownbeat: boolean }
  bars      Json? // Array of { t: number }
  sections  Json? // Array of { start: number, duration: number, label: string }
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Scene {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  shaderPack String
  params     Json
  isPublic   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Clip {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  sceneId   String?
  startMs   Int
  endMs     Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
